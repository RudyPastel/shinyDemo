% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/triplet.R
\docType{package}
\name{triplet}
\alias{triplet}
\alias{createTripletTemplate}
\title{Dashboard extension as a function triplet}
\usage{
createTripletTemplate(tripletName, path)
}
\arguments{
\item{tripletName}{The name of the triplet to create as a camelCase string without spaces.
It will be the root of the function names.}

\item{path}{The path to the folder in which the template is to be created.}
}
\value{
\code{\link[=createTripletTemplate]{createTripletTemplate()}} returns the path to the created file.
}
\description{
To extend the dashboard abide by the three function pattern a.k.a. the
\emph{triplet}. The extension is to be implemented as three functions that must
stick to the rules laid down in the section \verb{The triplet rules}. In practice,
create a template file via \code{\link[=createTripletTemplate]{createTripletTemplate()}} and build on it.
}
\section{The triplet rules}{


The extension \code{myExtension} will be embedded into the dashboard via three
functions. For convenience sake, build on a template created with
\code{\link[=createTripletTemplate]{createTripletTemplate()}}.
\enumerate{
\item \code{myExtensionMenuItem(id)}
\itemize{
\item Expects the string argument \code{id}.
\item Returns result of a call to \code{\link[shinydashboard:sidebarMenu]{shinydashboard::menuItem()}}.
\item All \code{inputId} are wrapped so: \code{inputId = shiny::NS(id, "myIdentifier")}
}
\item \code{myExtensionTabItem(id)}
\itemize{
\item Expects the string argument \code{id}.
\item Returns result of a call to \code{\link[shinydashboard:tabItem]{shinydashboard::tabItem()}}.
\item All \code{inputId} are wrapped so: \code{inputId = shiny::NS(id, "myIdentifier")}
}
\item \code{myExtensionServer(id)}
\itemize{
\item Expects the string argument \code{id}.
\item Returns result of a call to \code{\link[shiny:moduleServer]{shiny::moduleServer()}}.
\item \code{inputId} values are \emph{not} wrapped: \code{myInputValue = input[['myIdentifier']]}
}
}

These functions are to be used in \code{\link[=dashboardUi]{dashboardUi()}} and \code{\link[=dashboardServer]{dashboardServer()}} with the \emph{same} value of \code{id}.
\itemize{
\item \code{myExtensionMenuItem(id)}: is called in \code{\link[=dashboardUi]{dashboardUi()}} to create an argument to \code{\link[shinydashboard:sidebarMenu]{shinydashboard::sidebarMenu()}}.
\item \code{myExtensionTabItem(id)} : is called in \code{\link[=dashboardUi]{dashboardUi()}} to create an argument to \code{\link[shinydashboard:tabItems]{shinydashboard::tabItems()}}.
\item \code{myExtensionServer(id)}  : is called in \code{\link[=dashboardServer]{dashboardServer()}}.
}

The triplet fundamentally defines a shiny module. Shiny modules are powerful
tools that enable way more that the triplet. For more about shiny modules,
peruse \href{https://shiny.rstudio.com/articles/modules.html}{shiny.rstudio.com}
and \href{https://mastering-shiny.org/scaling-modules.html}{mastering-shiny.org}.
}

\concept{key objects}
